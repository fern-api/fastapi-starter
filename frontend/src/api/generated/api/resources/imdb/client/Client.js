/**
 * This file was auto-generated by Fern from our API Definition.
 */
import { ImdbApi } from "../../../..";
import * as serializers from "../../../../serialization";
import urlJoin from "url-join";
import * as core from "../../../../core";
import * as errors from "../../../../errors";
export class Client {
    options;
    constructor(options) {
        this.options = options;
    }
    /**
     * @throws {ImdbApi.MovieDoesNotExistError}
     */
    async getMovie(movieId) {
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment, `/movies/${await serializers.MovieId.jsonOrThrow(movieId)}`),
            method: "GET",
        });
        if (_response.ok) {
            return await serializers.Movie.parseOrThrow(_response.body, {
                allowUnknownKeys: true,
            });
        }
        if (_response.error.reason === "status-code") {
            switch (_response.error.body?.["error"]) {
                case "MovieDoesNotExistError":
                    throw new ImdbApi.MovieDoesNotExistError(await serializers.MovieId.parseOrThrow(_response.error.body, {
                        allowUnknownKeys: true,
                    }));
                default:
                    throw new errors.ImdbApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                    });
            }
        }
        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ImdbApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.ImdbApiTimeoutError();
            case "unknown":
                throw new errors.ImdbApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
